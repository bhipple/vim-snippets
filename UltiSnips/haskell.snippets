priority -50

extends haskell

## ============================================================================
##                             Data Definitions
## ============================================================================
snippet newtype "Newtype Wrapper"
newtype ${1:Type} = ${2:$1} ${3:members}
	deriving (${4:Eq, Show})$0
endsnippet

snippet type "Type Alias"
type ${1:Type} = ${0:Type}
endsnippet

snippet dataSimple "Simple Data Type"
data ${1:Type} = ${2:$1} ${3:Int}
	deriving (${4:Eq, Show})$0
endsnippet

snippet dataRecord "Record Data Type"
data ${1:Type} = ${2:$1} {
	${3:firstMember} :: ${4:firstType}
	} deriving (${5:Eq, Show})$0
endsnippet

## ============================================================================
##                           Instance Declarations
## ============================================================================
snippet instanceFoldable "Foldable Instance Declaration"
instance Foldable ${1:Type} where
	foldMap f (${2:Val}) = ${3:undefined}
endsnippet

snippet instanceSemigroup "Semigroup Instance Declaration"
instance Semigroup ${1:Type} where
	(<>) = ${0:undefined}
endsnippet

snippet instanceMonoid "Monoid Instance Declaration"
instance Monoid ${1:Type} where
	mempty = ${2:undefined}
	mappend x y = ${0:undefined}
endsnippet

snippet instanceFunctor "Functor Instance Declaration"
instance Functor ${1:Type} where
	fmap = ${0:undefined}
endsnippet

snippet instanceApplicative "Applicative Instance Declaration"
instance Applicative ${1:Type} where
	pure = ${2:undefined}
	(<*>) = ${0:undefined}
endsnippet

snippet instanceTraversable "Traversable Instance Declaration"
instance Traversable ${1:Type} where
	traverse f = ${2:minimal: traverse or sequenceA}
	sequenceA = ${3:minimal: traverse or sequenceA}
endsnippet

snippet instanceMonad "Monad Instance Declaration"
instance Monad ${1:Type} where
	return = pure
	(>>=) = ${0:undefined}
endsnippet

snippet instanceArbitrary "Arbitrary Instance Declaration"
instance Arbitrary ${1:Type} where
	arbitrary = ${0:undefined}
endsnippet

## ============================================================================
##                                   Misc
## ============================================================================
snippet deriving "Deriving snippet"
deriving (${1:Eq, Show})${0}
endsnippet

snippet script
#!/usr/bin/env stack
-- stack --install-ghc runghc --package turtle
{-# LANGUAGE OverloadedStrings #-}
import Turtle

main = do
	${0:echo "Hello World!"}
endsnippet
