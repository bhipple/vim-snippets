priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.cbegin(), $1.end() (cbeginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}cbegin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}cend()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
  public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

  private:
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
bsl::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "bsl::map (map)"
bsl::map<${1:int}, ${2:bsl::string}> ${0:map};
endsnippet

snippet set "bsl::set (set)"
bsl::set<${1:bsl::string}> ${0:set};
endsnippet

snippet vector "bsl::vector (v)"
bsl::vector<${1:bsl::string}> ${0:v};
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

##
## BAEL Logging
snippet trace "BAEL_LOG_TRACE"
BAEL_LOG_TRACE << ${1} << BAEL_LOG_END;
endsnippet
snippet debug "BAEL_LOG_DEBUG"
BAEL_LOG_DEBUG << ${1} << BAEL_LOG_END;
endsnippet
snippet info "BAEL_LOG_INFO"
BAEL_LOG_INFO << ${1} << BAEL_LOG_END;
endsnippet
snippet error "BAEL_LOG_ERROR"
BAEL_LOG_ERROR << ${1} << BAEL_LOG_END;
endsnippet
snippet fatal "BAEL_LOG_FATAL"
BAEL_LOG_FATAL << ${1} << BAEL_LOG_END;
endsnippet

# foreach
snippet fore "for(const auto& i :: container)"
for(const ${1:auto}& ${2:i} : ${3:container}) {
	${0}
}
endsnippet

snippet foreach "bsl::for_each(c.cbegin(), c.cend(), f)"
bsl::for_each(${1:container}.cbegin(), $1.end(), ${0:func});
endsnippet

# Google Test
snippet gtest "GTest TEST"
TEST(${1:Section}, ${2:Name}) {
	$0
}
endsnippet

snippet gtestf "GTest TEST_F"
TEST_F(${1:Fixture}, ${2:Name}) {
	$0
}
endsnippet

snippet fixture "GTest Fixture Class"
class ${1:Fixture} : public testing::Test {
  protected:
	virtual void SetUp() {
	$0
	}
};
endsnippet

# vim:ft=snippets:
